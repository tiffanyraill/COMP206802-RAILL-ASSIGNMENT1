<!DOCTYPE html>
<!-- saved from url=(0022)http://localhost:3000/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title></title>
  <link href="./localhost_files/font.css" rel="stylesheet">
  <link href="./localhost_files/css" rel="stylesheet">
  <link rel="stylesheet" href="./localhost_files/style.css">
  <link rel="stylesheet" href="./localhost_files/bootstrap.min.css">
  <link rel="stylesheet" href="./localhost_files/bootstrap-theme.min.css">
</head>
<body data-pinterest-extension-installed="cr2.0.5">
<nav class="navbar navbar-inverse navbar-fixed-top" id="myNavbar">
  <ul class="nav navbar-nav navbar-right">
    <li><a href="http://localhost:3000/" class="navbar-brand">Home</a></li>
    <li><a href="http://localhost:3000/Projects">Projects</a></li>
    <li><a href="http://localhost:3000/Services">Services</a></li>
    <li><a href="http://localhost:3000/contactMe">Contact Me</a></li>
    <li><a href="http://localhost:3000/aboutMe">About Me</a></li>
  </ul>
</nav>


<div class="main-wrapper" id="homePage">
    <div class="page-header">
        <h1>Tiffany T. Raill</h1>
    </div>
    <h4>COMPUTER PROGRAMMER ☆ COMPUTER SYSTEMS TECHNICIAN NETWORKING</h4>
</div>

<footer class="navbar-fixed-bottom">
  © 2017 - Tiffany Raill &amp; co.
</footer>

<script src="./localhost_files/jquery-3.1.1.min.js"></script>
<script src="./localhost_files/bootstrap.min.js"></script>



</body><script id="pb_blockScript">function inject() {
		var originalOpenWndFnKey = "originalOpenFunction";
		var originalWindowOpenFn = window.open;
		var originalCreateElementFn = document.createElement;
		var originalCreateEventFn = document.createEvent;
		var windowsWithNames = {};
		var timeSinceCreateAElement = 0;
		var lastCreatedAElement = null;
		var fullScreenOpenTime = void 0;
		var parentOrigin = window.location != window.parent.location ? document.referrer : document.location;

		window[originalOpenWndFnKey] = window.open; // save the original open window as global param
		function newWindowOpenFn() {
			var openWndArguments = arguments;
			var useOriginalOpenWnd = true;
			var generatedWindow = null;

			function blockedWndNotification(openWndArguments) {
				parent.postMessage({ type: "blockedWindow", args: JSON.stringify(openWndArguments) }, parentOrigin);
			}

			function getWindowName(openWndArguments) {
				var windowName = openWndArguments[1];
				if (windowName != null && !["_blank", "_parent", "_self", "_top"].includes(windowName)) {
					return windowName;
				}

				return null;
			}

			function copyMissingProperties(src, dest) {
				var prop = void 0;
				for (prop in src) {
					try {
						if (dest[prop] === undefined && src[prop]) {
							dest[prop] = src[prop];
						}
					} catch (e) {}
				}
				return dest;
			}

			// the element who registered to the event
			var capturingElement = null;
			if (window.event != null) {
				capturingElement = window.event.currentTarget;
			}

			if (capturingElement == null) {
				var caller = openWndArguments.callee;
				while (caller.arguments != null && caller.arguments.callee.caller != null) {
					caller = caller.arguments.callee.caller;
				}
				if (caller.arguments != null && caller.arguments.length > 0 && caller.arguments[0].currentTarget != null) {
					capturingElement = caller.arguments[0].currentTarget;
				}
			}

			/////////////////////////////////////////////////////////////////////////////////
			// Blocked if a click on background element occurred (<body> or document)
			/////////////////////////////////////////////////////////////////////////////////

			if (capturingElement != null && (capturingElement instanceof Window || capturingElement === document || capturingElement.URL != null && capturingElement.body != null || capturingElement.nodeName != null && (capturingElement.nodeName.toLowerCase() == "body" || capturingElement.nodeName.toLowerCase() == "#document"))) {
				window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because it was triggered by the " + capturingElement.nodeName + " element";
				useOriginalOpenWnd = false;
			} else {
				useOriginalOpenWnd = true;
			}
			/////////////////////////////////////////////////////////////////////////////////


			/////////////////////////////////////////////////////////////////////////////////
			// Block if a full screen was just initiated while opening this url.
			/////////////////////////////////////////////////////////////////////////////////

			var fullScreenElement = document.webkitFullscreenElement || document.mozFullscreenElement || document.fullscreenElement;
			if (new Date().getTime() - fullScreenOpenTime < 1000 || isNaN(fullScreenOpenTime) && isDocumentInFullScreenMode()) {

				window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a full screen was just initiated while opening this url.";

				/* JRA REMOVED
	    if (window[script_params.fullScreenFnKey]) {
	    window.clearTimeout(window[script_params.fullScreenFnKey]);
	    }
	    */

				if (document.exitFullscreen) {
					document.exitFullscreen();
				} else if (document.mozCancelFullScreen) {
					document.mozCancelFullScreen();
				} else if (document.webkitCancelFullScreen) {
					document.webkitCancelFullScreen();
				}

				useOriginalOpenWnd = false;
			}
			/////////////////////////////////////////////////////////////////////////////////


			if (useOriginalOpenWnd == true) {
				generatedWindow = originalWindowOpenFn.apply(this, openWndArguments);
				// save the window by name, for latter use.
				var windowName = getWindowName(openWndArguments);
				if (windowName != null) {
					windowsWithNames[windowName] = generatedWindow;
				}

				// 2nd line of defence: allow window to open but monitor carefully...

				/////////////////////////////////////////////////////////////////////////////////
				// Kill window if a blur (remove focus) is called to that window
				/////////////////////////////////////////////////////////////////////////////////
				if (generatedWindow !== window) {
					(function () {
						var openTime = new Date().getTime();
						var originalWndBlurFn = generatedWindow.blur;
						generatedWindow.blur = function () {
							if (new Date().getTime() - openTime < 1000 /* one second */) {
									window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a it was blured";
									generatedWindow.close();
									blockedWndNotification(openWndArguments);
								} else {
								originalWndBlurFn();
							}
						};
					})();
				}
				/////////////////////////////////////////////////////////////////////////////////
			} else {
				var windowName;

				(function () {
					// (useOriginalOpenWnd == false)

					var location = {
						href: openWndArguments[0]
					};
					location.replace = function (url) {
						location.href = url;
					};

					generatedWindow = {
						close: function close() {
							return true;
						},
						test: function test() {
							return true;
						},
						blur: function blur() {
							return true;
						},
						focus: function focus() {
							return true;
						},
						showModelessDialog: function showModelessDialog() {
							return true;
						},
						showModalDialog: function showModalDialog() {
							return true;
						},
						prompt: function prompt() {
							return true;
						},
						confirm: function confirm() {
							return true;
						},
						alert: function alert() {
							return true;
						},
						moveTo: function moveTo() {
							return true;
						},
						moveBy: function moveBy() {
							return true;
						},
						resizeTo: function resizeTo() {
							return true;
						},
						resizeBy: function resizeBy() {
							return true;
						},
						scrollBy: function scrollBy() {
							return true;
						},
						scrollTo: function scrollTo() {
							return true;
						},
						getSelection: function getSelection() {
							return true;
						},
						onunload: function onunload() {
							return true;
						},
						print: function print() {
							return true;
						},
						open: function open() {
							return this;
						},

						opener: window,
						closed: false,
						innerHeight: 480,
						innerWidth: 640,
						name: openWndArguments[1],
						location: location,
						document: { location: location }
					};

					copyMissingProperties(window, generatedWindow);

					generatedWindow.window = generatedWindow;

					windowName = getWindowName(openWndArguments);

					if (windowName != null) {
						try {
							// originalWindowOpenFn("", windowName).close();
							windowsWithNames[windowName].close();
						} catch (err) {}
					}
					//why set timeout?
					setTimeout(function () {
						var url = void 0;
						if (!(generatedWindow.location instanceof Object)) {
							url = generatedWindow.location;
						} else if (!(generatedWindow.document.location instanceof Object)) {
							url = generatedWindow.document.location;
						} else if (location.href != null) {
							url = location.href;
						} else {
							url = openWndArguments[0];
						}
						openWndArguments[0] = url;
						blockedWndNotification(openWndArguments);
					}, 100);
				})();
			}

			return generatedWindow;
		}

		/////////////////////////////////////////////////////////////////////////////////
		// Replace the window open method with Poper Blocker's
		/////////////////////////////////////////////////////////////////////////////////
		window.open = function () {
			try {
				return newWindowOpenFn.apply(this, arguments);
			} catch (err) {
				return null;
			}
		};
		/////////////////////////////////////////////////////////////////////////////////


		//////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Monitor dynamic html element creation to prevent generating <a> elements with click dispatching event
		//////////////////////////////////////////////////////////////////////////////////////////////////////////
		document.createElement = function () {

			var newElement = originalCreateElementFn.apply(document, arguments);

			if (arguments[0] == "a" || arguments[0] == "A") {
				(function () {

					timeSinceCreateAElement = new Date().getTime();

					var originalDispatchEventFn = newElement.dispatchEvent;

					newElement.dispatchEvent = function (event) {
						if (event.type != null && ("" + event.type).toLocaleLowerCase() == "click") {
							window.pbreason = "blocked due to an explicit dispatchEvent event with type 'click' on an 'a' tag";
							parent.postMessage({
								type: "blockedWindow",
								args: JSON.stringify({ "0": newElement.href })
							}, parentOrigin);
							return true;
						}

						return originalDispatchEventFn(event);
					};

					lastCreatedAElement = newElement;
				})();
			}

			return newElement;
		};
		/////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////
		// Block artificial mouse click on frashly created <a> elements
		/////////////////////////////////////////////////////////////////////////////////
		document.createEvent = function () {
			try {
				if (arguments[0].toLowerCase().includes("mouse") && new Date().getTime() - timeSinceCreateAElement <= 50) {
					window.pbreason = "Blocked because 'a' element was recently created and " + arguments[0] + " event was created shortly after";
					arguments[0] = lastCreatedAElement.href;
					parent.postMessage({
						type: "blockedWindow",
						args: JSON.stringify({ "0": lastCreatedAElement.href })
					}, parentOrigin);
					return null;
				}
				return originalCreateEventFn.apply(document, arguments);
			} catch (err) {}
		};
		/////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////
		// Monitor full screen requests
		/////////////////////////////////////////////////////////////////////////////////
		function onFullScreen(isInFullScreenMode) {
			if (isInFullScreenMode) {
				fullScreenOpenTime = new Date().getTime();
			} else {
				fullScreenOpenTime = NaN;
			}
		}

		/////////////////////////////////////////////////////////////////////////////////

		function isDocumentInFullScreenMode() {
			// Note that the browser fullscreen (triggered by short keys) might
			// be considered different from content fullscreen when expecting a boolean
			return document.fullScreenElement && document.fullScreenElement !== null || // alternative standard methods
			document.mozFullscreenElement != null || document.webkitFullscreenElement != null; // current working methods
		}

		document.addEventListener("fullscreenchange", function () {
			onFullScreen(document.fullscreen);
		}, false);

		document.addEventListener("mozfullscreenchange", function () {
			onFullScreen(document.mozFullScreen);
		}, false);

		document.addEventListener("webkitfullscreenchange", function () {
			onFullScreen(document.webkitIsFullScreen);
		}, false);
	}</script><script>inject()</script></html>